/* Generated By:JavaCC: Do not edit this line. LQMLParser.java */
package de.unibonn.iai.eis.luzzu.qml.parser;

import java.io.Reader ;
import java.io.StringReader ;

import java.util.ArrayList;
import java.util.List;
import java.util.Map ;
import java.util.HashMap ;

import de.unibonn.iai.eis.luzzu.qml.datatypes.Condition;
import de.unibonn.iai.eis.luzzu.qml.datatypes.ConditionType;
import de.unibonn.iai.eis.luzzu.qml.datatypes.Metric;
import de.unibonn.iai.eis.luzzu.qml.datatypes.Action;
import de.unibonn.iai.eis.luzzu.qml.datatypes.Rule;

public class LQMLParser implements LQMLParserConstants {
  static Map<String,String> compilerMap;
  static String def, label, desc, metricUri;
  static Rule rule;
  static Action action;

// BNF Definition  final public Map<String,String> parse() throws ParseException {
 compilerMap = new HashMap<String,String>();
    extractHeader();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelDescRuleActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelDescRuleActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriDescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriLabelRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriLabelDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriLabelDescRulePerm();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   compilerMap.put("[%%classname%%]",def);
   compilerMap.put("[%%metricuri%%]",metricUri);
   compilerMap.put("[%%label%%]",label);
   compilerMap.put("[%%description%%]",desc);
        Metric metric = new Metric(rule, action);
        {compilerMap.put("[%%computefunction%%]",metric.getComputeFunction());}
        {compilerMap.put("[%%imports%%]",metric.getImports());}
        {compilerMap.put("[%%variables%%]",metric.getVariables());}
        {compilerMap.put("[%%metricvaluefuntion%%]",metric.actionToJava());}
    jj_consume_token(PERIOD);
    jj_consume_token(0);
   {if (true) return compilerMap;}
    throw new Error("Missing return statement in function");
  }

  final public void extractHeader() throws ParseException {
    compilerMap.put("[%%author%%]",extractAuthor());
    compilerMap.put("[%%packagename%%]",extractPackage());
  }

  final public String extractAuthor() throws ParseException {
  Token t;
  String author = "";
    jj_consume_token(HEADER_INDICATOR);
    jj_consume_token(AUTHOR);
    jj_consume_token(COLON);
    t = jj_consume_token(QUOTED_STR);
  author = t.image.replace("\u005c"","") ;
  {if (true) return author;}
    throw new Error("Missing return statement in function");
  }

  final public String extractPackage() throws ParseException {
  Token t;
  String pkg = "";
    jj_consume_token(HEADER_INDICATOR);
    jj_consume_token(PACKAGE);
    jj_consume_token(COLON);
    t = jj_consume_token(QUOTED_STR);
          pkg = t.image.replace("\u005c"","")  ;
          {if (true) return pkg;}
    throw new Error("Missing return statement in function");
  }

  final public String extractDefinitionName() throws ParseException {
  Token t;
    jj_consume_token(DEF);
    jj_consume_token(LBRACE);
    t = jj_consume_token(STRICT_STR);
         String s = t.image.replace("\u005c"","") ;
    jj_consume_token(RBRACE);
    jj_consume_token(COLON);
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String extractLabel() throws ParseException {
  Token t;
    jj_consume_token(LABEL);
    jj_consume_token(LBRACE);
    t = jj_consume_token(QUOTED_STR);
          String s = t.image.replace("\u005c"","") ;
    jj_consume_token(RBRACE);
    jj_consume_token(SEMI_COLON);
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String extractDescription() throws ParseException {
  Token t;
    jj_consume_token(DESC);
    jj_consume_token(LBRACE);
    t = jj_consume_token(QUOTED_STR);
          String s = t.image;
    jj_consume_token(RBRACE);
    jj_consume_token(SEMI_COLON);
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Rule extractRule() throws ParseException {
  Rule r = new Rule();
  List<ArrayList<Condition>> conditionList = new ArrayList<ArrayList<Condition>>();
    jj_consume_token(MATCH);
    jj_consume_token(LBRACE);
         ArrayList<Condition> condLst = new ArrayList<Condition>();
    extractCondition(condLst);
         conditionList.add(condLst);
    jj_consume_token(RBRACE);
    jj_consume_token(SEMI_COLON);
         r.setConditionList(conditionList);
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void extractCondition(ArrayList<Condition> condLst) throws ParseException {
  Token t;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      t = jj_consume_token(TYPEOF);
     condLst.add(extractTypeOf());
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[1] = jj_gen;
     condLst.add(extractNonDefinedCondition());
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OPERATOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(LOGICAL_OPERATOR);
      extractCondition(condLst);
    }
    jj_consume_token(RPAREN);
  }

  final public Condition extractTypeOf() throws ParseException {
  Token t;
  Condition c = new Condition();
    jj_consume_token(LPAREN);
    jj_consume_token(SUBJECT_VAR);
    jj_consume_token(RPAREN);
    t = jj_consume_token(BOOLEAN_OPERATOR);
         c.setBooleanOperator(t.image);
    t = jj_consume_token(IRIref);
                c.setConditionType(ConditionType.TYPEOF);
                c.setRhs(t.image);
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Condition extractNonDefinedCondition() throws ParseException {
  Token t, t2, t3;
  Condition c = new Condition();
  c.setConditionType(ConditionType.NORMAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBJECT_VAR:
      t = jj_consume_token(SUBJECT_VAR);
            c.setLhs("?s");
      t2 = jj_consume_token(BOOLEAN_OPERATOR);
      t3 = jj_consume_token(IRIref);
      break;
    case PREDICATE_VAR:
      t = jj_consume_token(PREDICATE_VAR);
          c.setLhs("?p");
      t2 = jj_consume_token(BOOLEAN_OPERATOR);
      t3 = jj_consume_token(IRIref);
      break;
    case OBJECT_VAR:
      t = jj_consume_token(OBJECT_VAR);
                    c.setLhs("?o");
      t2 = jj_consume_token(BOOLEAN_OPERATOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRIref:
        t3 = jj_consume_token(IRIref);
        break;
      case QUOTED_STR:
        t3 = jj_consume_token(QUOTED_STR);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          c.setBooleanOperator(t2.image);
        c.setRhs(t3.image);
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Action extractAction() throws ParseException {
  Token t;
  Action action;
    jj_consume_token(ACTION);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      jj_consume_token(MAP);
                 action = Action.MAP;
      break;
    case COUNT:
      jj_consume_token(COUNT);
                   action = Action.COUNT;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final public String extractMetricURI() throws ParseException {
        Token t;
    jj_consume_token(METRICURI);
    jj_consume_token(LBRACE);
    t = jj_consume_token(IRIref);
   String s = t.image.replace("<","").replace(">","") ;
    jj_consume_token(RBRACE);
    jj_consume_token(SEMI_COLON);
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void MetricUriLabelDescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelDescRuleActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriDescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriLabelRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriLabelDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriLabelDescRulePerm();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelDescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelDescRuleActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefDescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefLabelRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefLabelDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefLabelDescRulePerm();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriDescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriDescRuleActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefDescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriDescRulePerm();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelRuleActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelRuleActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriLabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriLabelRulePerm();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelDescActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelDescActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriDescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriLabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriLabelDescPerm();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelDescRulePerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelDescRulePerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriDescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriLabelRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriLabelDescPerm();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelDescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      DescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      LabelRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      LabelDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      LabelDescRulePerm();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriDescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      DescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriDescRulePerm();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelRuleActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriLabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriLabelRulePerm();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelDescActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriDescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriLabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriLabelDescPerm();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelDescRulePerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriDescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriLabelRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriLabelDescPerm();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefDescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      DescRuleActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefDescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefDescRulePerm();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelRuleActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefLabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefLabelRulePerm();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelDescActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefDescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefLabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefLabelDescPerm();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelDescRulePerm();
      break;
    case LABEL:
      label = extractLabel();
      DefDescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      DefLabelRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefLabelDescPerm();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriRuleActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefRuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriRulePerm();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriDescActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefDescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriDescPerm();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriDescRulePerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefDescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriDescPerm();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriLabelPerm();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelRulePerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelRulePerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriLabelPerm();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelDescPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelDescPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriDescPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriLabelPerm();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DescRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESC:
      desc = extractDescription();
      RuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DescActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DescRulePerm();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      RuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      LabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      LabelRulePerm();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      DescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      LabelActionPerm();
      break;
    case ACTION:
      action = extractAction();
      LabelDescPerm();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      DescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      LabelRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      LabelDescPerm();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      RuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriRulePerm();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      DescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriDescPerm();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      DescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriDescPerm();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriActionPerm();
      break;
    case ACTION:
      action = extractAction();
      MetricUriLabelPerm();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelRulePerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      MetricUriLabelPerm();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      LabelDescPerm();
      break;
    case LABEL:
      label = extractLabel();
      MetricUriDescPerm();
      break;
    case DESC:
      desc = extractDescription();
      MetricUriLabelPerm();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefRuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      RuleActionPerm();
      break;
    case MATCH:
      rule = extractRule();
      DefActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefRulePerm();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefDescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      DescActionPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefDescPerm();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefDescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      DescRulePerm();
      break;
    case DESC:
      desc = extractDescription();
      DefRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefDescPerm();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelActionPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefLabelPerm();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelRulePerm();
      break;
    case LABEL:
      label = extractLabel();
      DefRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefLabelPerm();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      LabelDescPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefDescPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefLabelPerm();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriActionPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefActionPerm();
      break;
    case ACTION:
      action = extractAction();
      DefMetricUriPerm();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriRulePerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefRulePerm();
      break;
    case MATCH:
      rule = extractRule();
      DefMetricUriPerm();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriDescPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefDescPerm();
      break;
    case DESC:
      desc = extractDescription();
      DefMetricUriPerm();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriLabelPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      MetricUriLabelPerm();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      DefLabelPerm();
      break;
    case LABEL:
      label = extractLabel();
      DefMetricUriPerm();
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RuleActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACTION:
      action = extractAction();
      rule = extractRule();
      break;
    case MATCH:
      rule = extractRule();
      action = extractAction();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DescActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESC:
      desc = extractDescription();
      action = extractAction();
      break;
    case ACTION:
      action = extractAction();
      desc = extractDescription();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DescRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESC:
      desc = extractDescription();
      rule = extractRule();
      break;
    case MATCH:
      rule = extractRule();
      desc = extractDescription();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      action = extractAction();
      break;
    case ACTION:
      action = extractAction();
      label = extractLabel();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      rule = extractRule();
      break;
    case MATCH:
      rule = extractRule();
      label = extractLabel();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LabelDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = extractLabel();
      desc = extractDescription();
      break;
    case DESC:
      desc = extractDescription();
      label = extractLabel();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      action = extractAction();
      break;
    case ACTION:
      action = extractAction();
      metricUri = extractMetricURI();
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      rule = extractRule();
      break;
    case MATCH:
      rule = extractRule();
      metricUri = extractMetricURI();
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      desc = extractDescription();
      break;
    case DESC:
      desc = extractDescription();
      metricUri = extractMetricURI();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetricUriLabelPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METRICURI:
      metricUri = extractMetricURI();
      label = extractLabel();
      break;
    case LABEL:
      label = extractLabel();
      metricUri = extractMetricURI();
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefActionPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      action = extractAction();
      break;
    case ACTION:
      action = extractAction();
      def = extractDefinitionName();
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefRulePerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      rule = extractRule();
      break;
    case MATCH:
      rule = extractRule();
      def = extractDefinitionName();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefDescPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      desc = extractDescription();
      break;
    case DESC:
      desc = extractDescription();
      def = extractDefinitionName();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefLabelPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      label = extractLabel();
      break;
    case LABEL:
      label = extractLabel();
      def = extractDefinitionName();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefMetricUriPerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      def = extractDefinitionName();
      metricUri = extractMetricURI();
      break;
    case METRICURI:
      metricUri = extractMetricURI();
      def = extractDefinitionName();
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EADM() throws ParseException {
    jj_consume_token(0);
  }

  final public void EADL() throws ParseException {
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public LQMLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfc0,0x2000000,0x0,0x400000,0x0,0x30000,0xf80,0x7c0,0xf40,0xec0,0xdc0,0xbc0,0x780,0xf00,0xe80,0xd80,0xb80,0x740,0x6c0,0x5c0,0x3c0,0xe40,0xd40,0xb40,0xcc0,0xac0,0x9c0,0x700,0x680,0x580,0x380,0xe00,0xd00,0xb00,0xc80,0xa80,0x980,0x640,0x540,0x340,0x4c0,0x2c0,0x1c0,0xc40,0xa40,0x940,0x8c0,0x600,0x500,0x300,0x480,0x280,0x180,0xc00,0xa00,0x900,0x880,0x440,0x240,0x140,0xc0,0x840,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x800,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LQMLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LQMLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LQMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LQMLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LQMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LQMLParser(LQMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LQMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
